# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

default_platform(:ios)

platform :ios do
  # Development
  desc "Lint code" #代码检查
  lane :lint_code do
    puts("Lint code using SwfitLint")
    swiftlint(
      mode: :lint,
      executable: "./Pods/SwiftLint/swiftlint",  # The SwiftLint binary path (optional). Important if you've installed it via CocoaPods
      config_file: './.swiftlint.yml',
      raise_if_swiftlint_error: true)
  end

  desc "Lint and format code" #格式化代码
  lane :format_code do
    puts("Lint and format code using SwfitLint")
    swiftlint(
      mode: :autocorrect,
      executable: "./Pods/SwiftLint/swiftlint",  # The SwiftLint binary path (optional). Important if you've installed it via CocoaPods
      config_file: './.swiftlint.yml',
      raise_if_swiftlint_error: true)
  end

  desc "Sort Xcode project files" #文件排序
  lane :sort_files do
    puts("Sort the files for the Xcode project")
    sh "../scripts/sort-Xcode-project-file.pl ../iOS-engineering.xcodeproj"
  end

  desc "Prepare for a pull request" #准备提交前对代码格式化和排序
  lane :prepare_pr do
    format_code
    sort_files
  end

  desc "Build development app"
  lane :build_dev_app do
    puts("Build development app")
    gym(scheme: "iOS-engineering",
      workspace: "iOS-engineering.xcworkspace",
      export_method: "development",
      configuration: "Debug",
      xcargs: "-allowProvisioningUpdates")
  end

  # Test 打包测试、发现配置问题和其他问题
  desc "Run unit tests"
  lane :tests do
    puts("Run the tests")
    scan(
      scheme: "iOS-engineering", 
      workspace: "iOS-engineering.xcworkspace",
      output_directory: "./fastlane/dist", 
      output_types: "html", 
      buildlog_path: "./fastlane/dist")
  end

  # Profile 下载证书和pp文件
  desc "Download certificates and profiles"
  lane :download_profiles do
    keychain_name = "TemporaryKeychain"
    keychain_password = "TemporaryKeychainPassword"

    create_keychain(
      name: keychain_name,
      password: keychain_password,
      default_keychain: false,
      timeout: 3600,
      unlock: true,
    )

    match(
      type: "adhoc",
      readonly: true,
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      storage_mode: "git",
      git_url: "https://github.com/xxx", #git保存的证书地址
      app_identifier: "com.lym.io", ## app_id
      team_id: "6HLFCRTYQU"
    )

    match(
      type: "appstore",
      readonly: true,
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      storage_mode: "git",
      git_url: "https://github.com/xxx", #git保存的证书地址
      app_identifier: "com.lym.io", ## app_id
      team_id: "6HLFCRTYQU"
    )
  end

  desc "Create all new provisioning profiles managed by fastlane match" #创建pp文件
  lane :create_new_profiles do
    api_key = get_app_store_connect_api_key
    keychain_name = "TemporaryKeychain"
    keychain_password = "TemporaryKeychainPassword"

    create_keychain(
      name: keychain_name,
      password: keychain_password,
      default_keychain: false,
      timeout: 3600,
      unlock: true,
    )

    match(
      type: "adhoc",
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      storage_mode: "git",
      git_url: "https://github.com/xxx", #git保存的证书地址
      app_identifier: "com.lym.io", ## app_id
      team_id: "6HLFCRTYQU",
      api_key: api_key
    )

    match(
      type: "appstore",
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      storage_mode: "git",
      git_url: "https://github.com/xxx", #git保存的证书地址
      app_identifier: "com.lym.io", ## app_id
      team_id: "6HLFCRTYQU",
      api_key: api_key
    )
  end

  desc "Nuke all provisioning profiles managed by fastlane match"
  lane :nuke_profiles do
    api_key = get_app_store_connect_api_key
    keychain_name = "TemporaryKeychain"
    keychain_password = "TemporaryKeychainPassword"

    create_keychain(
      name: keychain_name,
      password: keychain_password,
      default_keychain: false,
      timeout: 3600,
      unlock: true,
    )

    match_nuke(
      type: "adhoc",
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      storage_mode: "git",
      git_url: "https://github.com/xxx", #git保存的证书地址
      app_identifier: "com.lym.io", ## app_id
      team_id: "6HLFCRTYQU",
      api_key: api_key
    )

    match_nuke(
      type: "appstore",
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      storage_mode: "git",
      git_url: "https://github.com/xxx", #git保存的证书地址
      app_identifier: "com.lym.io", ## app_id
      team_id: "6HLFCRTYQU",
      api_key: api_key
    )
  end

  desc "Add a new device to provisioning profile" # 添加设备
  lane :add_device do |options|
    name = options[:name]
    udid = options[:udid]
    
    # Add to App Store Connect
    api_key = get_app_store_connect_api_key
    register_device(
      name: name,
      udid: udid,
      team_id: "6HLFCRTYQU", ## team_id
      api_key: api_key
    )

    # Update the profiles to Git private repo
    match(
      type: "adhoc",
      force: true,
      storage_mode: "git",
      git_url: "https://github.com/xxx", #git保存的证书地址
      app_identifier: "com.lym.io", ## app_id
      team_id: "6HLFCRTYQU", ## team_id
      api_key: api_key
    )
  end

  # Archive 打包
  desc 'Creates an archive of the Internal app for testing'
  lane :archive_internal do
    unlock_keychain(
      path: "TemporaryKeychain-db",
      password: "TemporaryKeychainPassword")

    update_code_signing_settings(
      use_automatic_signing: false,
      path: "iOS-engineering/iOS-engineering.xcodeproj", #项目
      code_sign_identity: "iPhone Distribution",
      bundle_identifier: "com.ibanimatable.iOS-engineering.internal", #  bundle_id
      profile_name: "match AdHoc com.ibanimatable.iOS-engineering.internal")

    puts("Create an archive for Internal testing")
    gym(scheme: "iOS-engineering-Internal",
      workspace: "iOS-engineering.xcworkspace",
      export_method: "ad-hoc",
      xcargs: "-allowProvisioningUpdates")

    update_code_signing_settings(
      use_automatic_signing: true,
      path: "iOS-engineering/iOS-engineering.xcodeproj")
    
    puts("If you run this lane on your local machine, should not commit the changes for your project file to Git")
  end

  desc 'Creates an archive of the Production app with Appstore distribution'
  lane :archive_appstore do
    unlock_keychain(
      path: "TemporaryKeychain-db",
      password: "TemporaryKeychainPassword")

    update_code_signing_settings(
      use_automatic_signing: false,
      path: "iOS-engineering/iOS-engineering.xcodeproj",
      code_sign_identity: "iPhone Distribution",
      bundle_identifier: "com.ibanimatable.iOS-engineering",
      profile_name: "match AppStore com.ibanimatable.iOS-engineering")

    puts("Create an archive for AppStore submission")
    gym(scheme: "iOS-engineering-AppStore",
      workspace: "iOS-engineering.xcworkspace",
      export_method: "app-store",
      xcargs: "-allowProvisioningUpdates")

    update_code_signing_settings(
      use_automatic_signing: true,
      path: "iOS-engineering/iOS-engineering.xcodeproj")
    
    puts("If you run this lane on your local machine, should not commit the changes for your project file to Git")
  end

  # Crash report symbols 上传崩溃日志dSYM到 Firebase
#   desc 'Upload symbols to Crashlytics for Internal app'
#   lane :upload_symbols_to_crashlytics_internal do
#     upload_symbols_to_crashlytics(
#       dsym_path: "./iOS-engineering.app.dSYM.zip",
#       gsp_path: "./iOS-engineering/iOS-engineering/Configurations/Firebase/GoogleService-Info-Internal.plist",
#       api_token: ENV["FIREBASE_API_TOKEN"]
#     )
#   end

#   desc 'Upload symbols to Crashlytics for Production app'
#   lane :upload_symbols_to_crashlytics_appstore do
#     upload_symbols_to_crashlytics(
#       dsym_path: "./iOS-engineering.app.dSYM.zip",
#       gsp_path: "./iOS-engineering/iOS-engineering/Configurations/Firebase/GoogleService-Info-AppStore.plist",
#       api_token: ENV["FIREBASE_API_TOKEN"]
#     )
#   end

  # Deploy 将应用程序部署到Firebase分布中
#   desc 'Deploy the Internal app to Firebase Distribution'
#   lane :deploy_internal do
#     firebase_app_distribution(
#         app: "1:374168413412:ios:912d89b30767d8e5a038f1",
#         ipa_path: "iOS-engineering.ipa",
#         groups: "internal-testers",
#         release_notes: "A new build for the Internal App", # Can customize it using Git history.
#         firebase_cli_token: ENV["FIREBASE_API_TOKEN"]
#     )
#   end

#   desc 'Deploy the Production app to TestFlight and App Store'
#   lane :deploy_appstore do
#     api_key = get_app_store_connect_api_key
#     upload_to_app_store(
#       api_key: api_key,
#       app_identifier: "com.ibanimatable.iOS-engineering",
#       skip_metadata: true,
#       skip_screenshots: true,
#       precheck_include_in_app_purchases: false,
#     )
#   end

  desc 'Get App Store Connect API key' 
  # 通过App Store Connect API链接苹果服务器 
  # 需要配置全局git账号 
  # git config --global user.email xxx 和 git config --global user.name  xxx 
  private_lane :get_app_store_connect_api_key do
    # The key needs to have App Manager role, see https://github.com/fastlane/fastlane/issues/17066
    key_content = ENV["APP_STORE_CONNECT_API_CONTENT"]  # 配置App Store Connect API需要的环境配置
    api_key = app_store_connect_api_key(
      key_id: "D9B979RR69", #可以在App Store Connect keys也没找到
      issuer_id: "69a6de7b-13fb-47e3-e053-5b8c7c11a4d1", #可以在App Store Connect keys也没找到
      key_content: "-----BEGIN EC PRIVATE KEY-----\n" + key_content + "\n-----END EC PRIVATE KEY-----",
      duration: 1200,
      in_house: false
    )

    api_key 
  end
end
